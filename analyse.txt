Le retard est considérable j'en suis désoler, je suis littéralement déborder.
Si cela peut jouer en ma faveur, je dépose d'un tiers temps pour pour les examens...

Analyse

La sdl comprend un grand nombre de conteneur différent cependant ici les triangles stocker ne sont pas
ordonné dans un ordre particulier. Par conséquent seul les conteneur de type séquentielle sont utiles.
En effet les triangles ne sont associer a aucune clef et l'on a jamais besoin d'accéder a un triangle en particulier.
Les opérations son systématiquement appliquer a l'ensemble des éléments dans un ordre arbitraire.

Suivant que l'on implémenté les méthodes pour un type de conteneur ou pour un autre on ne doit pas faire les mêmes choix.
Par exemple pour la fusion de deux maillage, dans le cas d'un conteneur deque il faudrait d'abord redimensionner le tableau a
la nouvelle taille puis inséré un à un les élément.
Par contre pour une fusion  de liste si l'on est sur que le maillage inséré ne sera pas modifier par la suite il vaux mieux
simplement relié les deux listes ou, si l'on veux assuré l'intégrité des données,  inséré avec des push_back tous les élément
 sans effectuer de redimensionnement.

L'implémentation effectuer dans mon TP favorise donc d'utilisation de liste bien que l'utilisation de vecteur de meure paradoxalement
plus efficace. Cela est du au fait que les liste sont plus longues à construire que les tableau (pour chaque nouvelle insertion la sdl renseigne
les pointeurs prec et suiv).
L'utilisation de liste simplement chainée ( std::forwar_list ) est a privilégier par rapport au liste doublement chainées( std::list ) pour l'optimisation
en temps et en espace.
En effet la possibilité de revenir en arrière n'es jamais utilisé.
Comme je n'ai pas implémenté de marnière a redimensionner les tableau std::deque il n'y a pas d'avantage a les utilisé rapport au simple tableau dynamique
vecteur.

L'autre type de conteneur sont inutile et/ou non supporter.

Pour valider quantitativement ce qui est dit ici on test la création et la fusion de deux maillages pour différentes tailles dans le cas de 
liste et de tableau.

Sans surprise dans le cas des liste, le temps est linéaire de coefficient un.

Dans le cas des tableau il semble que ce soit aussi le cas bien que les bush_back a répétitions devrais entrainé des redimensionnement du 
tableau et par conséquent retiré le caractère linéaire du temps de calcule.


Pour : ou m et n sont donné en paramètre.
		Maillage<float,list> M(Point<float>(2,3), Point<float>(5,6), Point<float>(3,8), Point<float>(0,5), m/4, n);
		Maillage<float,list> N(Point<float>(2,3), Point<float>(5,6), Point<float>(3,8), Point<float>(0,5), 2*m, n);
		M.fusioner(N);


time ./testParam 1000 1000 1

	1,85s

time ./testParam 2000 1000 1                                                            

	3,65s

time ./testParam 4000 1000 1

	7,30s user

time ./testParam 8000 1000 1

	14,76s

time ./testParam 16000 1000 1

	29,18s



Vector :

Meme chose pour les vecotrs.

time ./testParam 1000 1000 1

	1,20s

time ./testParam 2000 1000 1

	2,44s

time ./testParam 4000 1000 1                                                            

	4,81s

time ./testParam 8000 1000 1

	14,46s

time ./testParam 16000 1000 1

	32,23s

